// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package handler is a generated GoMock package.
package handler

import (
	models "personal/go-employee-management/models"
	pagination "personal/go-employee-management/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockemployeeService is a mock of employeeService interface.
type MockemployeeService struct {
	ctrl     *gomock.Controller
	recorder *MockemployeeServiceMockRecorder
}

// MockemployeeServiceMockRecorder is the mock recorder for MockemployeeService.
type MockemployeeServiceMockRecorder struct {
	mock *MockemployeeService
}

// NewMockemployeeService creates a new mock instance.
func NewMockemployeeService(ctrl *gomock.Controller) *MockemployeeService {
	mock := &MockemployeeService{ctrl: ctrl}
	mock.recorder = &MockemployeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockemployeeService) EXPECT() *MockemployeeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockemployeeService) Create(ctx *gofr.Context, e *models.Employee) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, e)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockemployeeServiceMockRecorder) Create(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockemployeeService)(nil).Create), ctx, e)
}

// Delete mocks base method.
func (m *MockemployeeService) Delete(ctx *gofr.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockemployeeServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockemployeeService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockemployeeService) Get(ctx *gofr.Context, id string) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockemployeeServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockemployeeService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockemployeeService) GetAll(ctx *gofr.Context, page *pagination.Page) ([]models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, page)
	ret0, _ := ret[0].([]models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockemployeeServiceMockRecorder) GetAll(ctx, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockemployeeService)(nil).GetAll), ctx, page)
}

// Update mocks base method.
func (m *MockemployeeService) Update(ctx *gofr.Context, e *models.Employee) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, e)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockemployeeServiceMockRecorder) Update(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockemployeeService)(nil).Update), ctx, e)
}
