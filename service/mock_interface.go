// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	models "personal/go-employee-management/models"
	pagination "personal/go-employee-management/pagination"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockemployeeStore is a mock of employeeStore interface.
type MockemployeeStore struct {
	ctrl     *gomock.Controller
	recorder *MockemployeeStoreMockRecorder
}

// MockemployeeStoreMockRecorder is the mock recorder for MockemployeeStore.
type MockemployeeStoreMockRecorder struct {
	mock *MockemployeeStore
}

// NewMockemployeeStore creates a new mock instance.
func NewMockemployeeStore(ctrl *gomock.Controller) *MockemployeeStore {
	mock := &MockemployeeStore{ctrl: ctrl}
	mock.recorder = &MockemployeeStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockemployeeStore) EXPECT() *MockemployeeStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockemployeeStore) Create(ctx *gofr.Context, e *models.Employee) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, e)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockemployeeStoreMockRecorder) Create(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockemployeeStore)(nil).Create), ctx, e)
}

// Delete mocks base method.
func (m *MockemployeeStore) Delete(ctx *gofr.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockemployeeStoreMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockemployeeStore)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockemployeeStore) Get(ctx *gofr.Context, id int64) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockemployeeStoreMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockemployeeStore)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockemployeeStore) GetAll(ctx *gofr.Context, page *pagination.Page) ([]models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, page)
	ret0, _ := ret[0].([]models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockemployeeStoreMockRecorder) GetAll(ctx, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockemployeeStore)(nil).GetAll), ctx, page)
}

// Update mocks base method.
func (m *MockemployeeStore) Update(ctx *gofr.Context, e *models.Employee) (*models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, e)
	ret0, _ := ret[0].(*models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockemployeeStoreMockRecorder) Update(ctx, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockemployeeStore)(nil).Update), ctx, e)
}
